buildscript {
    ext {
        avroVersion = '1.8.2'
        lombokVersion = '1.18.6'
        springVersion = '2.1.4.RELEASE'
        confluentVersion = '5.2.1'
        kafkaStreamsVersion = '2.2.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'io.github.otaviof'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
    mavenLocal()
    mavenCentral()
    jcenter()

    maven { url("http://repo1.maven.org/maven2/") }
    maven { url("http://packages.confluent.io/maven/") }
}

dependencies {
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    compile("org.apache.avro:avro:${avroVersion}")

    compile("io.confluent:kafka-avro-serializer:${confluentVersion}")
    compile("io.confluent:kafka-streams-avro-serde:${confluentVersion}")

    compile("org.apache.kafka:kafka-streams:${kafkaStreamsVersion}")
    compile("org.apache.kafka:kafka-clients:${kafkaStreamsVersion}")

    compile("org.awaitility:awaitility:3.1.6")
    compile("io.opentracing.contrib:opentracing-kafka-client:0.1.1")

    compile("org.springframework.boot:spring-boot-starter-web:${springVersion}",
            "org.springframework.boot:spring-boot-starter-logging:${springVersion}",
            "org.springframework.boot:spring-boot-configuration-processor:${springVersion}",
            "org.springframework.boot:spring-boot-starter-actuator:${springVersion}")

    implementation('org.springframework.boot:spring-boot-starter')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}

task verify(type: Test, dependsOn: testClasses) {
    filter {
        includeTestsMatching("io.github.otaviof.ravine.*")
    }
    beforeTest { descriptor -> logger.lifecycle("## Testing: $descriptor.className") }
}

task integration(type: Test, dependsOn: testClasses) {
    filter {
        includeTestsMatching("integration.*")
    }
}

task coverage(type: JacocoReport) {
    executionData(fileTree(project.rootDir.absolutePath).include("${buildDir}/jacoco/*.exec"))

    reports {
        xml.enabled(true)
        xml.destination(file("${buildDir}/reports/jacoco/report.xml"))
        html.enabled(false)
        csv.enabled(false)
    }
}

coverage.dependsOn(verify)
coverage.dependsOn(integration)

