plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'net.researchgate.release' version '2.6.0'
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
}

group = 'io.github.otaviof'
sourceCompatibility = '11'

repositories {
    mavenCentral()
    mavenLocal()
    mavenCentral()
    jcenter()

    maven { url("http://repo1.maven.org/maven2/") }
    maven { url("http://packages.confluent.io/maven/") }
}

dependencies {
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    compile("org.apache.avro:avro:${avroVersion}")
    compile("io.confluent:kafka-avro-serializer:${confluentVersion}")
    compile("io.confluent:kafka-streams-avro-serde:${confluentVersion}")

    compile("org.apache.kafka:kafka-streams:${kafkaStreamsVersion}")
    compile("org.apache.kafka:kafka-clients:${kafkaStreamsVersion}")

    compile("org.apache.commons:commons-lang3:${apacheCommonsVersion}")
    compile("org.awaitility:awaitility:${awaitilityVersion}")

    compile("io.opentracing.contrib:opentracing-spring-cloud-starter:${otSpringStarterVersion}")
    compile("io.opentracing.contrib:opentracing-spring-tracer-configuration-starter:${otSpringTracerConfigVersion}")
    
    compile("io.opentracing.contrib:opentracing-kafka-client:${otKafkaClientVersion}")
    compile("io.opentracing.contrib:opentracing-kafka-streams:${otKafkaStreamsVersion}")

    compile("io.opentracing.contrib:opentracing-spring-jaeger-starter:${otSpringJaegerVersion}")
    compile("io.jaegertracing:jaeger-core:${jaegerCoreVersion}")

    compile("io.micrometer:micrometer-registry-prometheus:${micrometerVersion}")
    compile("io.micrometer:micrometer-core:${micrometerVersion}")

    compile("org.springframework.boot:spring-boot-starter-web:${springVersion}",
            "org.springframework.boot:spring-boot-starter-logging:${springVersion}",
            "org.springframework.boot:spring-boot-configuration-processor:${springVersion}",
            "org.springframework.boot:spring-boot-starter-actuator:${springVersion}",
            "org.springframework.boot:spring-boot-starter-validation:${springVersion}")

    implementation('org.springframework.boot:spring-boot-starter')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

bootJar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
    version = null
    mainClassName = "io.github.otaviof.ravine.Ravine"
}

assemble.dependsOn(bootJar)

release {
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
}

test {
    testLogging {
        events 'failed'
        exceptionFormat 'full'
    }
    beforeTest { descriptor -> logger.lifecycle("## Testing: $descriptor.className") }
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}

task verify(type: Test, dependsOn: testClasses) {
    filter {
        includeTestsMatching("io.github.otaviof.ravine.*")
    }
}

task integration(type: Test, dependsOn: testClasses) {
    filter {
        includeTestsMatching("integration.*")
    }
}

verify.finalizedBy(jacocoTestReport)
integration.finalizedBy(jacocoTestReport)

task coverage(type: JacocoReport, dependsOn: [verify, integration]) {
    sourceSets sourceSets.main
    executionData verify
    executionData integration
    reports {
        xml.enabled(true)
        xml.destination(file("${buildDir}/reports/jacoco.xml"))
        html.enabled(false)
    }
}
